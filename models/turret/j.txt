0.5t,0.DKf88AyGG,0.1z,0,1Q,0.P,2.P,R,g,r,0.DKgFBfFlm,1.9n,1.1B,3Y,2R,10,1.P,1R,1T,1f,0.Dh,0.9n,3z,3g,2D,1.iQGVT3rTY,2,0.5,1.5,2Z,2Y,2b,0.iQGVT3rTY,2q,t,u,/,1.5t,0.1B,1,1.DKgFBfFlm,2.5,2.Dh,4.P,3L,1p,z,0.HmtfK61D+,15,1.Dh,3D,3/,1.1z,2U,2T,2W,3,0.V5Xq3XNlm,2V,2X,2i,3.P,w,11,1/,2.1z,4,0.QfIpo52GG:-1;2;-3;4;-5;4;6;6;7;8;9;A$1|0.9$Raycaster,-1;-B;C;4;5;4;6;D;7;E;F;G$$Wire,-1;-B;3;4;4;-5;H;7;6;I;J;K$$EnergyGun,L;-1;M;4;5;-5;6;D;6;N;O;P$1|0.1$Transformer,-1;-Q;M;4;-5;4;6;6;7;8;9;A$1|0.9$Raycaster,R;4;S;4;-5;4;T;R;R;U;V;W$4|MCwwLDA=;2|MTAwMDAwLDEwMDAwMCwxMDAwMDA=;3|0;1|0;5|0$Gyro,-6;-X;-H;4;Y;4;R;7;T;Z;a;b$$LithiumPowercell,c;d;-C;5;4;4;H;6;S;U;V;W$$SSDExpansion,-e;-f;d;4;5;-5;6;g;e;E;F;G$$Wire,h;6;-C;5;4;4;i;6;S;j;k;l$$Copper,-1;-Q;-3;4;-5;4;6;6;7;8;9;A$1|0.9$Raycaster,h;-m;-C;4;5;Y;6;e;i;8;9;n$$EthernetCable,R;4;o;4;4;4;R;R;6;p;p;p$$Fence,R;4;-e;4;-5;-5;R;e;R;q;q;q$2|0;3|0;1|$Computer,-1;2;r;4;-5;4;6;6;7;8;9;A$1|0.9$Raycaster,-1;2;1;4;-5;4;6;6;7;8;9;A$1|0.9$Raycaster,-c;-X;-H;4;-5;4;T;7;6;s;t;u$1|Z2FiIHR1cnJldA==$Sign,-1;-B;r;4;4;-5;H;7;6;I;J;K$$EnergyGun,-1;-Q;L;4;-5;4;6;6;7;8;9;A$1|0.9$Raycaster,-1;-Q;3;4;-5;4;6;6;7;8;9;A$1|0.9$Raycaster,-1;-Q;c;4;-5;4;6;6;7;8;9;A$1|0.9$Raycaster,L;6;4;4;Y;4;6;T;v;8;9;n$$EthernetCable,o;-r;-1;4;5;4;6;6;7;E;F;G$$Wire,-C;-w;M;4;5;-5;6;7;6;E;F;G$$Wire,R;4;c;4;-5;4;6;R;R;x;y;z$1|2$Instrument,L;-d;3;4;4;-5;S;6;+;a;/;10$1|1$Port,-1;2;3;4;-5;4;6;6;7;8;9;A$1|0.9$Raycaster,e;-r;-M;4;5;4;6;6;S;q;4;11$3|2;1|1;2|1$Polysilicon,-1;-B;M;4;4;-5;H;7;6;I;J;K$$EnergyGun,-1;2;L;4;-5;4;6;6;7;8;9;A$1|0.9$Raycaster,-1;-Q;r;4;-5;4;6;6;7;8;9;A$1|0.9$Raycaster,-1;-B;1;4;4;-5;H;7;6;I;J;K$$EnergyGun,12;-r;-L;4;5;4;d;6;D;E;F;G$$Wire,-1;-B;L;4;4;-5;H;7;6;I;J;K$$EnergyGun,-6;-X;o;-5;4;4;g;6;7;s;t;u$$Titanium,-1;2;c;4;-5;4;6;6;7;8;9;A$1|0.9$Raycaster,r;-c;4;4;4;4;6;6;13;q;4;4$1|;2|0$Button,13;4;4;-5;Y;4;R;v;R;8;9;A$$LifeSensor,-1;-B;c;4;4;-5;H;7;6;I;J;K$$EnergyGun,-1;2;M;4;-5;4;6;6;7;8;9;A$1|0.9$Raycaster,-1;-Q;1;4;-5;4;6;6;7;8;9;A$1|0.9$Raycaster,-1;-B;-3;4;4;-5;H;7;6;I;J;K$$EnergyGun,-1;-B;-1;4;5;4;6;D;7;E;F;G$$Wire,L;6;C;4;5;4;6;T;6;8;9;A$1|0$Switch,-1;14;M;4;5;-5;S;7;7;E;F;G$$Wire,13;4;D;-5;4;4;R;S;R;s;t;u$$Titanium,L;-r;d;4;4;4;6;6;R;U;V;W$$Microphone,R;4;C;4;4;4;R;R;6;8;9;A$1|MTI4MzI5MDA1Mw==$Speaker:
